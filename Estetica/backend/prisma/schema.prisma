generator client {
  provider = "prisma-client-js"
}

// Development uses SQLite for quick local iterations.
// For production, switch the provider to "postgresql" and
// update the DATABASE_URL to point at the managed instance (see notes in DATABASE_DESIGN.md).
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SECRETARY
  WORKER
}

enum AppointmentStatus {
  PENDING
  UNASSIGNED
  ASSIGNED
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  OTHER
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  name         String?
  role         Role          @default(WORKER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  assignedAppointments Appointment[] @relation("AssignedWorker")
  invites             UserInvite[]  @relation("InvitedBy")

  @@index([role])
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique 
  basePrice   Decimal  @db.Decimal(10, 2)
  durationMin Int
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]

  @@index([active])
}


model Appointment {
  id                  String             @id @default(cuid())
  clientName          String
  clientEmail         String?
  clientPhone         String?
  /// Date-only semantics. Store as midnight UTC to avoid TZ drift.
  scheduledDate       DateTime
  /// Stringified HH:mm (24h) slot selected in the booking UI.
  scheduledTime       String
  status              AppointmentStatus  @default(PENDING)
  /// Optional quote captured during booking before final payment.
  estimatedPrice      Decimal?           @db.Decimal(10, 2)
  serviceId           String
  assignedWorkerEmail String?
  assignedWorkerId    String?
  confirmToken        String?            @unique
  confirmTokenExpiresAt DateTime?
  assignedAt          DateTime?
  confirmedAt         DateTime?
  completedAt         DateTime?
  canceledAt          DateTime?
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  service       Service      @relation(fields: [serviceId], references: [id])
  assignedWorker User?       @relation("AssignedWorker", fields: [assignedWorkerId], references: [id])
  payment       Payment?
  productUsages ProductUsage[]

  @@index([scheduledDate])
  @@index([status])
  @@index([assignedWorkerEmail])
  @@index([assignedWorkerId])
  @@index([serviceId, scheduledDate])
}

model Payment {
  id                     String          @id @default(cuid())
  appointmentId          String          @unique
  amount                 Decimal         @db.Decimal(10, 2)
  tip                    Decimal?        @db.Decimal(10, 2)
  method                 PaymentMethod   @default(CASH)
  workerCommissionPct    Decimal         @db.Decimal(5, 4) @default(0.4000)
  workerCommissionAmount Decimal         @db.Decimal(10, 2)
  businessGain           Decimal         @db.Decimal(10, 2)
  paidAt                 DateTime?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  notes                  String?

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([paidAt])
}

model Product {
  id         String    @id @default(cuid())
  name       String
  sku        String?   @unique
  stock      Int       @default(0)
  minStock   Int?
  category   String?
  buyPrice   Decimal   @db.Decimal(10, 2)
  sellPrice  Decimal?  @db.Decimal(10, 2)
  expiresAt  DateTime?
  location   String?
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  usages ProductUsage[]

  @@index([active])
  @@index([category])
}

model ProductUsage {
  id            String      @id @default(cuid())
  appointmentId String
  productId     String
  quantity      Decimal     @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime    @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([appointmentId, productId])
}

model UserInvite {
  id          String   @id @default(cuid())
  email       String
  token       String   @unique
  role        Role
  expiresAt   DateTime
  usedAt      DateTime?
  invitedById String?
  createdAt   DateTime @default(now())

  invitedBy User? @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([expiresAt])
  @@index([role])
}
