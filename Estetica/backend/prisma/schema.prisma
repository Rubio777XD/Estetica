generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum AssignmentStatus {
  pending
  accepted
  declined
  expired
}

enum BookingStatus {
  scheduled
  confirmed
  done
  canceled
}

enum PaymentMethod {
  cash
  transfer
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(EMPLOYEE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Service {
  id        String   @id @default(cuid())
  name      String   @unique
  price     Float
  duration  Int
  description String?
  imageUrl    String?
  highlights  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]

  @@index([name])
}

model Booking {
  id         String        @id @default(cuid())
  clientName String
  clientEmail String?
  serviceId  String
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(scheduled)
  notes      String?
  assignedEmail String?
  assignedAt    DateTime?
  amountOverride Float?
  invitedEmails String[] @default([])
  confirmedEmail String?
  completedBy   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  service Service  @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  payments Payment[]
  assignments Assignment[]
  commissions Commission[]

  @@index([startTime])
  @@index([status])
  @@index([serviceId])
  @@index([assignedEmail])
}

model Payment {
  id        String        @id @default(cuid())
  bookingId String
  amount    Float
  method    PaymentMethod
  createdAt DateTime      @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([method])
}

model Commission {
  id            String   @id @default(cuid())
  bookingId     String
  percentage    Float
  amount        Float
  assigneeEmail String?
  createdAt     DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([assigneeEmail])
}

model Product {
  id                String   @id @default(cuid())
  name              String
  price             Float
  stock             Int
  lowStockThreshold Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([name])
  @@index([stock])
}

model Assignment {
  id         String           @id @default(cuid())
  bookingId  String
  email      String
  status     AssignmentStatus @default(pending)
  token      String           @unique
  expiresAt  DateTime
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([status])
  @@index([expiresAt])
}
